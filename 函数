#include <stdio.h>
//int Add(int x, int y)
//{
//	int z =0 ;
//	z = x + y;
//	return z;
//
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
/////////////////
//#include <string.h>
//int main()
//{
//	//strlen求字符串长度
//	//strcpy字符串拷贝,要引用头文件
//	char arr1[] = "bit";
//	char arr2[20] = "132###123";
//	strcpy(arr2, arr1);//将arr1中的内容拷贝到arr2中，arr2中的内容会被覆盖
//	printf("%s\n", arr2);
//	return 0;
//}
////////////////
//#include <string.h>
//int main()
//{
//	char arr[] = "hello world";
//	//memset内存设置,需要引入头文件string.h
//	memset(arr,'*',5);//将arr中的前5个字符设置成*
//	printf("%s\n", arr);
//	return 0;
//}
//////////////////
//int get_max(int x, int y)
//{
//	if (x > y)
//	{
//		return x;
//	}
//	else if (x <= y)
//	{
//		return y;
//	}
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int max=get_max(a, b);//自定义get_max函数求最大值，必须放到上面
//	printf("%d\n", max);
//	return 0;
//}
///////////////////
//写一个函数交换两个整型的内容
//当实参传给形参时，形参实际上时实参的一份临时拷贝，对形参的修改时不会改变实参的
//void swap(int x, int y)//void代表没有返回值
//{
//	int tem = 0;
//	tem = x;
//	x = y;
//	y = tem;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	swap(a, b);//直接构建函数不能实现a,b,x,y有自己专门的地址空间
//	printf("%d %d",a,b);
//	return 0;
//}
//*******
//int main()
//{
//	int a = 10;
//	int* pa = &a;//指针变量，*pa将a的地址存到pa中
//	*pa = 20;//解引用操作
//
//	return 0;
//}
//*******

//void swap(int* pa, int* pb)//void代表没有返回值
//{
//	int t = 0;
//	t = *pa;//使用指针的方法进行调用
//	*pa = *pb;
//	*pb = t;
//}
//
//int main()
//{
//	int a = 10;
//	int b = 20;
//	swap(&a, &b);//直接构建函数不能实现a,b,x,y有自己专门的地址空间
//	printf("%d %d",a,b);
//	return 0;
//}
////////////////////练习
//////////打印100-200的素数
#include <math.h>
//int is_prime(int n)
//{
//	int j = 0;
//	for (j = 2; j <= sqrt(n); j++)
//	{
//		if (n % j == 0)
//		{
//			return 0;
//		}
//	}
//	if (j > sqrt(n))//可以没有这一行
//	{
//	    return 1;
//	}
//
//}
//
//int main()
//{
//	int i = 0;
//	int count = 0;
//	for (i = 100; i <= 200; i++)
//	{
//		//判断是否是素数
//		if (is_prime(i) == 1)
//		{
//			printf("%d ", i);
//			count++;
//		}
//	}
//	printf("%d", count);
//	return 0;
//}
////////////写一个函数判断是否是润年
//int is_leap_year(int y)
//{
//	if ((y % 4 == 0 && y % 100 != 0) || (y % 400 == 0))
//		return 1;
//	else
//		return 0;
//}
//int main()
//{
//	int year = 0;
//	for (year = 1000; year <= 2000; year++)
//	{
//		//判断是否是闰年
//		if (is_leap_year(year) == 1)
//		{
//			printf("%d ", year);
//		}
//	}
//	return 0;
//}
/////////////////////////
//写一个函数，实现二分查找
//int binary_search(int arr[], int k,int sz) //arr[]本质上是一个指针
//{
//	//算法实现
//	int left = 0;
//	
//	int right = sz-1;
//	int i = 0;
//	while (left <= right)//一定要是小于等于
//	{
//		int mid = (right + left) / 2;//要放在循环体里面
//		if (arr[mid] > k)
//		{
//			right = mid-1;
//		}
//		else if (arr[mid] < k)
//		{
//			left = mid+1;
//		}
//		else
//		{
//			return mid;
//		}
//	}
//	if (left > right)
//	{
//		return -1;
//	}
//}
//
//int main()
//{
//	int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//	int k = 15;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	//int ret=binary_search(arr, k);//使用数组传参是，直接传输，传的是首元素的地址,并且不能求元素个数
//	int ret = binary_search(arr, k, sz);
//	if (ret == -1)
//	{
//		printf("找不到指定数字\n");
//	}
//	else
//	{
//		printf("找到了，下标为%d\n", ret);
//	}
//	return 0;
//}
/////////////////////每调用一次函数num+1
//void Add(int* p)
//{
//	(*p)++;//++的优先级高于*，应该使用（）
//}
//int main()
//{
//	int num = 0;
//	Add(&num);
//	Add(&num);
//	printf("%d ", num);
//	return 0;
//}

/////////////////////链式访问
//int main()
//{
//	int len = 0;
//	len = strlen("abc");
//	printf("%d\n", len);
//
//	printf("%d\n", strlen("abc"));//链式访问
//	return 0;
//}

//int main()
//{
//	printf("%d", printf("%d", printf("%d", 43)));//如果打印printf时，打印的结果是printf的个数
//	return 0;
//}

////////////////////函数声明
//当用函数调用时，创建新头文件，和函数表,头文件中写声明，源文件中写函数
#include "add.h"//自己创建的函数的时候，用""
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = 0;
//	//函数调用
//	sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
