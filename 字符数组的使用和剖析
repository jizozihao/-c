#include <stdio.h>
#include <string.h>
#include <assert.h>

//字符串的查找
//int is_left_move(char* arr1, char* arr2)
//{
//	int len1 = strlen(arr1);
//	int len2 = strlen(arr2);
//	if (len1 != len2)
//		return 0;
//	//在字符串arr1后面追加arr1
//	// strcat(arr1,arr2);  在arr1后面追加arr2，但自己给自己追加时，不能用
//	// strncat(arr1,arr2,6);
//	strncat(arr1, arr2,len1);
//	//判断arr2是否是arr1的子串
//	//strstr(arr1,arr20);从arr1中找arr2的子串
//	char* ret = strstr(arr1, arr2);
//	if (ret == NULL)
//		return 0;
//	else
//		return 1;
//
//}
//
//int main(void)
//{
//	char arr1[30] = "abcdef";
//	char arr2[] = "cde";
//	int ret = is_left_move(arr1, arr2);
//	if (ret == 1)
//	{
//		printf("Yes\n");
//	}
//	else
//	{
//		printf("No\n");
//	}
//	return 0;
//}

//杨氏矩阵
//int FindNum(int arr[3][3], int k, int row, int col)
//{
//	int x = 0;
//	int y = col - 1;
//	while (x<=row-1 && y>=0)
//	{
//		if (arr[x][y] > k)
//		{
//			y--;
//		}
//		else if (arr[x][y] < k)
//		{
//			x++;
//		}
//		else
//		{
//			return 1;
//		}
//	}
//	return 0;
//}
//int FindNum(int arr[3][3], int k, int *px, int *py)
//{
//	int x = 0;
//	int y = *py - 1;
//	while (x<=*px-1 && *py>=0)
//	{
//		if (arr[x][y] > k)
//		{
//			y--;
//		}
//		else if (arr[x][y] < k)
//		{
//			x++;
//		}
//		else
//		{
//			*px = x;
//			*py = y;
//			return 1;
//		}
//	}
//	*px = -1;
//	*py = -1;
//	return 0;
//}
//int main()
//{
//	int arr[3][3] = { {1,2,3},{4,5,6},{7,8,9} };
//	int k = 6;
//	int x = 3;
//	int y = 3;
//	
//	//返回型参数
//	int ret = FindNum(arr,k,&x,&y);
//	if (ret == 1)
//	{
//		printf("找到了\n");
//		printf("下标是：%d %d\n", x, y);
//	}
//	else
//	{
//		printf("找不到\n");
//
//	}
//	return 0;
//}

//字符函数和字符串函数

//1.计数器写法
//2.递归
//3.指针-指针

//int my_strlen(const char* str)
//{
//	int count = 0;
//	assert(str != NULL);//引头文件 assert.h
//	while (*str != '\0')//while(*str) 也可以
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//int main()
//{
//	int len = my_strlen("abcdef");
//	//错误示范
//	//char arr[] = { 'a','b','c','d','e','f' };
//	//int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}
//int main()
//{
//	if (my_strlen("abc") - my_strlen("abcdef") > 0)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
//}


//char* my_strlen(char* dest, const char* src)
//{
//	assert(dest != NULL);
//	assert(src != NULL);
//	char* ret = dest;
//	//拷贝src指向的字符串到dest指向的空间
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	//返回目的空间的起始位置
//	return ret;
//
//}
//int main()
//{
//	char arr1[] = "abcdefghi";
//	char arr2[] = "bit";
//	//char* arr1[] = "abcdefghi"; 错误，常量字符串不可变
//	//char arr2[]={'b','i','t'};  不能这样写，找不到\0
//	my_strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}


//char* my_strcat(char* dest, const char* src)
//{
//	assert(dest && src);
//	char* ret = dest;
//	//1.找到目的字符串的\0
//	while (*dest != '\0')
//	{
//		dest++;
//	}
//	//2.追加
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//
//}
//int main()
//{
//	char arr1[30] = "hello";
//	char arr2[] = "world";
//
//	my_strcat(arr1, arr2);  //强行追加，访问越界
//	printf("%s\n", arr1);
//	return 0;
//}

//int main()
//{
//	char* p1 = "adafaz";
//	char* p2 = "acdfcz";
//	//strcmp(s1,s2)  s1>s2  返回正数   s1=s2 返回0    s1<s2返回负数
//	int ret = strcmp(p1, p2);//比较的是第一个字符，如果一个相等，则比较后一个
//	if (ret > 0)
//	{
//		printf("p1 > p2\n");
//
//	}
//	else if (ret == 0)
//	{
//		printf("p1=p2\n");
//	}
//	else
//	{
//		printf("p1<p2\n");
//	}
//	
//	printf("%d\n", ret);
//	return 0;
//}



//my_strcmp(const char* str1, const char* str2)
//{
//	assert(str1 && str2);
//	//比较
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;//相等
//		}
//		str1++;
//		str2++;
//	}
//	return (*str1 - *str2);//Linux 下的strcmp函数实现
//}
//
//int main()
//{
//	char* p1 = "cdafaz";
//	char* p2 = "fcdfcz";
//	int ret = my_strcmp(p1, p2);
//	printf("ret=%d\n", ret);
//	return 0;
//}

//my_strcmp(const char* str1, const char* str2)
//{
//	assert(str1 && str2);
//	//比较
//	while (*str1 == *str2)
//	{
//		if (*str1 == '\0')
//		{
//			return 0;//相等
//		}
//		str1++;
//		str2++;
//	}
//	if (*str1 > *str2)   //Windows下的函数实现
//		return 1;//大于
//	else
//		return -1;//小于
//}
//
//int main()
//{
//	char* p1 = "adafaz";
//	char* p2 = "acdfcz";
//	int ret = my_strcmp(p1, p2);
//	printf("ret=%d\n", ret);
//	return 0;
//}


////01-1    焦子豪  1班  2021012411  3.12
//#include <stdio.h>
//int main(void)
//{
//	printf("姓名：焦子豪 ");
//	printf("性别：男 ");
//	printf("年级：2021 ");
//	printf("班级：1班 ");
//	return 0;
//}
////01-2    焦子豪  1班  2021012411  3.12
//#include <stdio.h>
//int main(void)
//{
//	char ret ;
//	printf("请输入小写字母：");
//	scanf("%c", &ret);
//	char tmp = ret - 32;
//	printf("a的ASCLL码为%d。\n", ret);
//	printf("%c对应的大写字母为%c。\n",ret, tmp);
//	printf("A的ASCLL码为%d。\n", tmp);
//	return 0;
//}
////01-3    焦子豪  1班  2021012411  3.12
//#include <stdio.h>
//int main(void)
//{
//	double a = 0;
//	double b = 0;
//	printf("请输入矩形的长和宽，使用空格隔开：");
//	scanf("%lf %lf", &a, &b);
//	printf("矩形面积为%.2f，周长为%.2f。", a * b, 2 * a + 2 * b);
//	return 0;
//}

//int mian()
//{
//	char arr1[5] = "abc";
//	char arr2[] = "hello bit";
//	strcpy(arr1, arr2);
//	printf("%s\n", arr1);
//	return 0;
//}

//int main()
//{
//	char arr1[10] = "abcdef";
//	char arr2[] = "hello bit";
//	strncpy(arr1, arr2, 4); //指定拷贝个数少于字符串长度，不会拷贝\0
//	strncpy(arr1, arr2, 20);//拷贝个数多于字符串长度，在拷贝后追加\0
//	printf("%s\n", arr1);//hellef
//	return 0;
//}

int main()
{
	char arr1[30] = "hello\0xxxxxxxxxxxxxxxx";
	char arr2[] = "world";
	strncat(arr1, arr2, 8);
	printf("%s\n", arr1);
	return 0;
}
