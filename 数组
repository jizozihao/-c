#include <stdio.h>
#include <string.h>
//int main()
//{
//	int arr[10] = {1,2,3};//不完全初始化，剩下的元素默认初始化为0
//	char arr2[5] = {'a','b',98};
//	char arr3[5] = "ab";
//	char arr4[] = "abcdef";//根据字符串的内容来确定[]里的内容，最后有一个\0
//	printf("%d\n", sizeof(arr4));//7
//	//sizeof计算arr4所占空间的大小，有\0
//	printf("%d\n", strlen(arr4));//6
//	//strlen计算字符串的长度，没有最后的\0
//	return 0;
//}        //sizeof  和  strlen没有关联
         //strlen只能求字符串长度 计算\0之前的字符长度   是库函数，需要引用头文件
         //sizeof计算变量，数组、类型所占空间的大小 是操作符，不用引头文件


//int main()
//{
//    char arr1[] = "abc";
//    char arr2[] = { 'a','b','c' };
//    printf("%d\n", sizeof(arr1));//4
//    printf("%d\n", sizeof(arr2));//3
//    printf("%d\n", strlen(arr1));//3
//    printf("%d\n", strlen(arr2));//3
//    return 0;
//}

//int main()
//{
//    /*char arr[] = "abcdef";
//    int i = 0;
//    for (i = 0; i < strlen(arr); i++)
//    {
//        printf("%c\n", arr[i]);
//    }*/
//    /*int arr[] = { 1,2,3,4,5,6,7,8,9,0 };
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//        printf("%d ", arr[i]);
//    }*/
//    return 0;
//}


///////////////一维数组的内存存储
//int main()
//{
//    int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    int i = 0;
//    for (i = 0; i < sz; i++)
//    {
//        printf("&arr[%d]=%p\n",i, &arr[i]);
//    }
//    return 0;
//}

//////////////////二维数组的创建
//二维数组的[][]中行可以为空，列不可以省略
//int main()
//{
//    //创建一个三行四列的二维数组
//    int arr[3][4] = {1,2,3,4,5};
//    return 0;
//}

//二维数组的访问依旧通过下标访问，下标从零开始
//int main()
//{
//    int arr[3][4] = { {1,2,3} ,{4,5} };
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf("%d ", arr[i][j]);
//        }
//        printf("\n");
//    }
//    return 0;
//}

/////////二维数组在内存中储存
//int main()
//{
//    int arr[3][4] = { {1,2,3} ,{4,5} };
//    int i = 0;
//    for (i = 0; i < 3; i++)
//    {
//        int j = 0;
//        for (j = 0; j < 4; j++)
//        {
//            printf("arr[%d][%d] = %p\n",i,j, &arr[i][j]);
//        }
//    }
//    return 0;
//}
//////////////////冒泡排序
//void bubble_sort(int arr[],int sz)
//{
//    int i = 0;
//    int n = 0;
//    for (i = 0; i < sz-1; i++)
//    {
//        int flag = 1;//假设这一次要排的数据已经有序
//        int j = 0;
//        for (j = 0; j < sz-1-i; j++)
//        {
//            if (arr[j] > arr[j+1])
//            {
//                n = arr[j];
//                arr[j] = arr[j+1];
//                arr[j+1] = n;
//                flag = 0;//本趟排序的数据其实不完全有序
//            }
//        }
//        if (flag == 1)
//        {
//            break;
//        }
//    }
//
//}
//int main()
//{
//    int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
//    int i = 0;
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    bubble_sort(arr,sz);
//    for (i = 0; i < sz; i++)
//    {
//         printf("%d ", arr[i]);//打印数组要遍历打印
//    }
//   
//    return 0;
//}


//int main()
//{
//    //数组的地址和数组首元素的地址一样
//    int arr[] = { 1,2,3,4,5,6,7 };
//    printf("%p\n", arr);//00EFF704 打印的是数组名时，打印数组首元素地址
//    //sizeof()中放数组名计算的是整个数组的大小
//    //*arr时，数组名代表的时整个数组的地址
//    printf("%p\n", &arr[0]);//00EFF704
//    printf("%d\n", *arr); //1
//    printf("%p\n", &arr);//数组的地址 00AFFCF0
//    return 0;
//}
