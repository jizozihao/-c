#include <stdio.h>
#include <string.h>
#include <assert.h>
//暴力解法
//void left_move(char* arr, int k)
//{
//	assert(arr!=NULL);
//	int i = 0;
//	int len = strlen(arr);
//	for (i = 0; i < k; i++)
//	{
//		//左旋转一个字符
//		char tmp = *arr;
//		//将后面的元素往前挪
//		int j = 0;
//		for (j = 0; j < len-1; j++)
//		{
//			*(arr + j) = *(arr + j + 1);
//		}
//		//
//		*(arr + len - 1) = tmp;
//	}
//}
//int main(void)
//{
//	char arr[] = "abcdef";
//	left_move(arr, 2);
//
//	printf("%s\n", arr);
//	return 0;
//}

//三部交换法
void reverse(char* left, char* right)
{
	assert(left != NULL);
	assert(right != NULL);
	while (left<right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}
void left_move(char* arr, int k)
{
	assert(arr);
	int len = strlen(arr);//  ab cdef
	assert(k <= len);
	reverse(arr,arr+k-1);//逆序左边   ba
	reverse(arr+k,arr+len-1);//逆序右边  fedc
	reverse(arr,arr+len-1);//逆序整体   cdefab
}
//int main(void)
//{
//	char arr[] = "abcdef";
//	left_move(arr, 3);
//
//	printf("%s\n", arr);
//	return 0;
//}



int is_left_move(char* s1, char* s2)
{
	int len = strlen(s1);
	int i = 0;
	for (i = 0; i < len; i++)
	{
		left_move(s1, 1);
		int ret = strcmp(s1, s2);
		if (ret == 0)
			return 1;
	}
	return 0;
}
int main(void)
{
	char arr1[] = "abcdef";
	char arr2[] = "defbc";
	int ret = is_left_move(arr1, arr2);
	if (ret == 1)
		printf("yes\n");
	else
		printf("no\n");
	return 0;
}
