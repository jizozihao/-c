#include <stdio.h>

//int main()
//{
//	int a = 10;
//	int* p = &a;
//
//}

//int main()
//{
//	/*printf("%d\n", sizeof(char*));
//	printf("%d\n", sizeof(int*));
//	printf("%d\n", sizeof(short*));
//	printf("%d\n", sizeof(double*));*/
//
//	int a = 0x11223344;
//	int* pa = &a;
//	*pa = 0;
//	//char* pc = &a;
//	/*printf("%p\n", pa);
//	printf("%p\n", pc);*/
//
//	return 0;
//}

//int main()
//{
//	int a = 0x11223344;
//	int* pa = &a;
//	char* pc = &a;
//	printf("%p\n", pa);
//	printf("%p\n", pa+1);//空间+4
//
//	printf("%p\n", pc);
//	printf("%p\n", pc+1);//空间+1
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	char* p = arr;//数组名--首元素地址
//	int i = 0;
//	for (i = 0; i < 10; i++)
//	{
//		*(p + i) = 1;
//	}
//	printf("%d\n", *p);
//	return 0;
//
//}

//int main()
//{
//	int a;//局部变量不初始化，默认是随机值
//	int* p;//局部指针不初始化，地址是随机值
//
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 0 };
//	int* p = arr;//数组名时，不用&，就是地址
//	int i = 0;
//	for (i = 0; i < 12; i++)
//	{
//		p++;
//	}
//	return 0;
//}
//
//int* test()
//{
//	int a = 10;
//	return &a;
//}//此函数一结束，地址已经还给系统
//int main()
//{
//	int* p = test();
//	*p = 20;
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	int* p = &a;
//	*p = 20;
//	p = NULL;//指针为空时，不能使用*p访问
//
//	return 0;
//}

//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	int i = 0;
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = arr;//数组第一个元素的地址
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", *p);
//		p = p + 1;
//	}
//	return 0;
//}

//int main()
//{
//	int ch[5] = { 0 };
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	&arr[9] - &ch[0];
//	
//
//	return 0;
//}

//my_strlen(char* str)
//{
//	char* start = str;
//	char* end = str;
//	while (*end != '\0')
//	{
//		end++;
//	}
//	return end - start;
//}
//
//int main()
//{
//	char ch[] = "bit";
//
//	int len = my_strlen(ch);
//	printf("%d\n", len);
//	return 0;
//}

int main()
{
	int arr[10] = { 0 };
	printf("%p\n", arr);
	printf("%p\n", arr+1);
	printf("%p\n", &arr[0]);
	printf("%p\n", &arr[0]+1);
	printf("%p\n", &arr);
	printf("%p\n", &arr+1);
	return 0;
}
