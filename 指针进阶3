#include <stdio.h>

//将void(*)(int)这个函数指针类型重命名为pfun_t
//typedef void(*pfun_t)(int);
//
//void(*  signal(int, void(*)(int))   )(int);
////signal是一个函数声明
////signal的函数参数有两个，第一个是int。第二个是指针函数，该函数指针指向的函数的参数是int,返回类型是void
////signal函数的返回类型也是一个函数指针，该函数指针指向的函数的参数是int,返回类型是void
////简化
//pfun_t signal(int, pfun_t);
//
//
//int Add(int x, int y)
//{
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//
//	int(*pa)(int, int) = Add;
//	printf("%d\n", (*pa)(2, 3));//*的优先级小于（），必须用（*pa）
//	printf("%d\n", Add(2, 3));
//	return 0;
//}

//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//int main()
//{
//	int* arr[5];
//	int(*pa)(int, int) = Add;//pa里面可以存Add,Mul,Sub,Div
//	//需要一个存放函数指针的数组
//	int(*parr[4])(int, int) = { Add,Sub,Mul,Div };//函数指针的数组
//	int i = 0;
//	for (i = 0; i < 4; i++)
//	{
//		printf("%d\n",parr[i](2, 3));//5 -1 6 0
//	}
//
//	
//	
//	
//	return 0;
//}

//my_strcpy(char* dest, const char* src);
////写一个函数指针pf，能够指向my_strcpy
//char* (*pf)(char*, const char*) = my_strcpy;
////写一个函数指针数组pfArr，能够存放4个my_strcpy函数的地址
//char* (*pfArr[4])(char*, const char*) = my_strcpy;


//void menu()
//{
//	printf("*******************\n");
//	printf("**1.add     2.sub**\n");
//	printf("**3.mul     4.div**\n");
//	printf("**5.Xor     0.exit **\n");
//	printf("*******************\n");
//}
//
//int Add(int x, int y)
//{
//	return x + y;
//}
//int Sub(int x, int y)
//{
//	return x - y;
//}
//int Mul(int x, int y)
//{
//	return x * y;
//}
//int Div(int x, int y)
//{
//	return x / y;
//}
//
//int Xor(int x, int y)
//{
//	return x ^ y;
//}

//int main()
//{
//	int input = 0;
//	int x = 0;
//	int y = 0;
//	int(*pfArr[])(int, int) = { 0,Add,Sub,Mul,Div,Xor };
//	//利用函数指针数组设计计算器程序
//	do
//	{
//		menu();
//		printf("请选择:>");
//		scanf("%d", &input);
//		if (input >= 1 && input <= 5)
//		{
//			printf("请输入两个操作数:>");
//			scanf("%d%d", &x, &y);
//			int ret = pfArr[input](x, y);
//			printf("%d\n", ret);
//		}
//		else if(input==0)
//		{
//			printf("退出\n");
//		}
//		else
//		{
//			printf("选择错误\n");
//		}
//	} while (input);
//}

//void Calc(int(*pf)(int,int))//回调函数
//{
//	int x = 0;
//	int y = 0;
//	printf("请输入两个操作数:>");
//	scanf("%d%d", &x, &y);
//	printf("%d\n", pf(x, y));
//}
//int main()
//{
//	int input = 0;
//	
//	do
//	{
//		menu();
//		printf("请选择:>");
//		scanf("%d", &input);
//		
//		switch (input)
//		{
//		case 1:
//			Calc(Add);
//			break;
//		case 2:
//			Calc(Sub);
//			break;
//		case 3:
//			Calc(Mul);
//			break;
//		case 4:
//			Calc(Div);
//			break;
//		case 0:	
//			printf("退出\n");
//			break;
//		default:
//			printf("选择错误\n");
//			break;
//		}
//	} while (input);
//}


//int main()
//{
//	int arr[10] = { 0 };
//	int (*p)[10] = &arr;//取出数组的地址
//
//	int(*   pf           )(int, int);//函数指针
//	int(*   pfArr[4]     )(int, int);//pfArr是一个数组，函数指针的数组
//	int(*  (*ppfArr)[4]  )(int, int) = &pfArr;
//	//ppfArr是一个指向【函数指针数组】的指针
//	//ppfArr是一个数组指针,指针指向的数组有4个元素
//	//指向数组的每个元素的类型是一个函数指针 int(*)(int,int)
//}

//回调函数

void print(char*str)
{
	printf("hehe:%s\n", str);
}

void test(void(*p)(char*))
{
	printf("test\n");
	p("bit");
}
int main()
{
	test(print);
	return 0;
}
